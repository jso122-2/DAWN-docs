{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Here\'92s a full build-out of the **Invocation** section, expanding your three bullets into a concrete spec + symbolic layer:\
\
````markdown\
## Invocation \'97 How Sigils Are Cast\
\
### Timing\
- Sigils are not persistent processes.  \
- They are **cast at discrete ticks** \'97 moments where DAWN chooses to act symbolically, in response to pressure, entropy, or tracer feedback.  \
- Each invocation = one glyph event with parameters.  \
\
---\
\
### Sources of Invocation\
1. **Core Modules (automatic)**\
   - Invoked when SCUP metrics cross thresholds (e.g., pressure overload, entropy spike).  \
   - Example: Tick Engine triggers **Flame House: ignite_release** when P > \uc0\u952 .  \
\
2. **Tracers (feedback)**\
   - Tracers may \'93speak\'94 in sigils instead of raw metrics.  \
   - Example: Spider issues a **Weaving House: reinforce_thread** sigil when schema tension rises.  \
\
3. **Operator (manual/GUI)**\
   - Human overseer can trigger glyphs through symbolic console (visual or text glyph).  \
   - Example: operator invokes **Purification House: prune_cluster** to clean soot.  \
\
---\
\
### Stacking & Composition\
- Sigils can be **layered in sequence** within the same tick.  \
- Stacking allows complex operations to be composed symbolically without bespoke code.  \
- Examples:  \
  - **Purification + Weaving** = prune \uc0\u8594  immediately reinforce surviving connections.  \
  - **Flame + Echo** = ignite burst \uc0\u8594  amplify into vocal resonance.  \
  - **Memory + Mirror** = rebloom recall \uc0\u8594  audit coherence simultaneously.  \
\
---\
\
### Syntax & Representation\
Sigil invocations are stored/logged as composable JSON-like structures:\
\
```json\
\{\
  "tick": 104233,\
  "invoker": "Core/Tracer/Operator",\
  "stack": [\
    \{ "sigil": "purge_soot", "house": "purification", "params": \{"target_cluster": "X"\} \},\
    \{ "sigil": "weave_thread", "house": "weaving", "params": \{"source": "X", "target": "Y"\} \}\
  ]\
\}\
````\
\
---\
\
### Operational Rules\
\
* **One stack per tick** per invoker (avoids runaway recursion).\
* **House compatibility** check: some sigils reinforce each other, others conflict.\
* **Conflict resolution**: SHI chooses which glyph dominates if stacked sigils contradict.\
* **Decay**: sigil effects shimmer like blooms \'97 most expire in 3\'9610 ticks unless reinforced.\
\
---\
\
### Safeguards\
\
* Prevents **sigil flood**: rate limit per tick.\
* Prevents **drift**: Owl audits invocation logs, checks glyph \uc0\u8594  effect consistency.\
* Prevents **arbitrary stacking**: only Houses with defined composability allowed.\
\
```\
\
\uc0\u9889  This makes sigils feel like **active spellcasting inside DAWN** \'97 ephemeral, stackable, and tied to pressure + tracer triggers.  \
\
\uc0\u55357 \u56393  Do you want me to go deeper next into a **worked example** (e.g. a \'93tick walkthrough\'94 where Core pressure triggers a Flame sigil, Spider adds Weaving, Owl mirrors \'97 showing a whole stack in action)?\
```\
}